!function(t){var e={};function o(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)o.d(r,n,function(e){return t[e]}.bind(null,n));return r},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";o.r(e);const r="TokenHotbar";class n{constructor(){}load(t){return this.hotbarPage=this.getSetting(t,n.keys.hotbarPage),this.alwaysLinkToActor=this.getSetting(t,n.keys.alwaysLinkToActor),this.linkToLinkedActor=this.getSetting(t,n.keys.linkToLinkedActor)||this.alwaysLinkToActor,this.shareHotbar=this.getSetting(t,n.keys.shareHotbar),this.lockHotbar=this.getSetting(t,n.keys.lockHotbar)&&this.shareHotbar,this}getSetting(t,e){return t.get(r,e)}}n.keys={alwaysLinkToActor:"linkToActor",linkToLinkedActor:"link",hotbarPage:"page",shareHotbar:"share",lockHotbar:"lock"};class a{getEntity(t){return game.actors.get(t)||canvas.tokens.get(t)}}class s extends a{get(t){return t}}class i extends a{get(t){return"shared-macros"}}class g extends a{get(t){const e=this.getEntity(t);return e instanceof Token?(e.data.actorLink?e.actor:e).id:e.id}}class l extends a{get(t){const e=this.getEntity(t);return e instanceof Token?e.actor.id:e.id}}class c{constructor(t,e,o,r,n=console){this.hotbarFlag=t,this.notifier=e,this.hotbarPage=o,this.flagKeyStrategy=r,this.logger=n}save(t,e,o){const r=this.getSlots();e=e.filter(t=>t.macro&&r.includes(t.slot));const n=this.flagKeyStrategy.get(t.id),a=this.hotbarFlag.get(t.id);let s=a[n]||[];return!!this.hasChanges(e,s)&&(o?(this.logger.debug("[Token Hotbar]","preSave",n,a),a[n]=e.map(t=>({slot:t.slot,id:t.macro.id})),this.logger.debug("[Token Hotbar]","Saving",n,a),this.hotbarFlag.set(t.id,a),!0):(this.notifier.warn("The token hotbar is locked for players. Any macros placed on this page will be replaced."),!1))}load(t,e,o){const r=this.hotbarFlag.get(t.id),n=this.flagKeyStrategy.get(t.id),a=r[n]||[];if(0===a.length)return{hasMacros:!1,hotbar:e};this.logger.debug("[Token Hotbar]","Loading",n,a);let s=!1;for(let t of this.getSlots()){let r=a.find(e=>e.slot==t);if(!r)this.unset(e,t);else{let n=o.find(t=>t.id===r.id);n?(e[t]=n.id,s=!0):this.unset(e,t)}}return{hasMacros:s,hotbar:e}}remove(t){const e=(new s).get(t),o=this.hotbarFlag.get(t);delete o[e],this.hotbarFlag.set(t,o)}getSlots(){return function(t,e=0){return[...Array(t).keys()].map(t=>t+e)}(10,10*(this.hotbarPage-1)+1)}unset(t,e){delete t[e],t["-="+e]=null}hasChanges(t,e){if(this.logger.debug("[Token Hotbar]","Comparing",t,e),t.length!=e.length)return!0;for(let o=0;o<t.length;o++)if(t[o].macro._id!=e[o].id)return!0;return!1}}class h{constructor(t){this.getFlagStrategy=t}get(t){return this.getFlagStrategy.get(t).getFlag("world",r)||{}}set(t,e){return this.getFlagStrategy.get(t).unsetFlag("world",r).then(t=>t.setFlag("world",r,e))}}class u{getEntity(t){return game.actors.get(t)||canvas.tokens.get(t)}}class d extends u{get(t){return game.user}}class b extends u{get(t){const e=this.getEntity(t);return e instanceof Token&&e.data.actorLink?e.actor:e}}class k extends u{get(t){const e=this.getEntity(t);return e instanceof Token?e.actor:e}}class f{constructor(t){this.settings=t}create(){const t=this.createFlagStrategy();return new h(t)}createFlagStrategy(){return new y(this.settings).create()}}class y{constructor(t){this.settings=t}create(){if(this.settings.shareHotbar){if(this.settings.alwaysLinkToActor)return new k;if(this.settings.linkToLinkedActor)return new b}return new d}}class p{constructor(t){this.settings=t}create(){return this.settings.shareHotbar?new i:this.settings.alwaysLinkToActor?new l:this.settings.linkToLinkedActor?new g:new s}}class w{constructor(t,e,o,r=console){this.settings=t,this.hotbar=e,this.pageFlag=o,this.logger=r}goToPage(t){return t?this.goToTokenHotbar():this.goToLastActivePage()}goToTokenHotbar(){return this.hotbar.page!=this.settings.hotbarPage&&this.pageFlag.set(this.hotbar.page),this.render(this.settings.hotbarPage)}goToLastActivePage(){if(this.hotbar.page==this.settings.hotbarPage)return this.render(this.pageFlag.get())}render(t){return this.hotbar.page=t,new Promise((e,o)=>{setTimeout(()=>{this.hotbar.render(),this.logger.debug("[Token Hotbar]","rendered page",t),e()},5)})}}class m{get(){let t=localStorage.getItem(r+".activePage");return t?+t:1}set(t){return localStorage.setItem(r+".activePage",t+"")}}class T{error(...t){console.error.apply(null,arguments)}warn(...t){console.warn.apply(null,arguments)}info(...t){console.info.apply(null,arguments)}debug(...t){var e;(null===(e=window.TokenHotbar)||void 0===e?void 0:e.debug)&&console.debug.apply(null,arguments)}}var v=function(t,e,o,r){return new(o||(o=Promise))((function(n,a){function s(t){try{g(r.next(t))}catch(t){a(t)}}function i(t){try{g(r.throw(t))}catch(t){a(t)}}function g(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(s,i)}g((r=r.apply(t,e||[])).next())}))};function H(){if(!game.user)return void setTimeout(H,200);let t=game.user.getFlag("world","token-hotbar"),e=game.user.getFlag("world",r);t&&!e?(console.info("[Token Hotbar]","Migrating to new flag key."),game.user.setFlag("world",r,t),game.user.unsetFlag("world","token-hotbar")):console.debug("[Token Hotbar]","Nothing to migrate.",!!t,!!e)}function P(){const t=(new n).load(game.settings),e=new f(t),o=new p(t);return new c(e.create(),ui.notifications,t.hotbarPage,o.create(),new T)}Hooks.on("init",()=>{game.settings.register(r,n.keys.hotbarPage,{name:"Page",hint:"The hotbar page that will be replaced with the token hotbar. Changing this will wipe existing token bars!",scope:"world",config:!0,default:5,type:Number}),game.settings.register(r,n.keys.linkToLinkedActor,{name:"Link to linked actor",hint:"Link the token hotbar to the actor if the token is linked.",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register(r,n.keys.alwaysLinkToActor,{name:"Always link to actor",hint:"Link the token hotbar to the actor even if the token is unlinked.",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register(r,n.keys.shareHotbar,{name:"Share the hotbar with other players",hint:"When set every token will have a single hotbar shared by all players.",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register(r,n.keys.lockHotbar,{name:"Lock shared hotbar",hint:"When set, only a GM can update the token hotbar. Only applies to shared hotbars.",scope:"world",config:!0,default:!1,type:Boolean}),console.log("initialized Token Hotbar"),setTimeout(H,200)}),Hooks.on("renderHotbar",t=>{const e=(new n).load(game.settings),o=ui.hotbar._getMacrosByPage(e.hotbarPage),r=canvas.tokens.controlled[0];return r&&e.hotbarPage===ui.hotbar.page&&P().save(r,o,!e.lockHotbar||game.user.isGM),!0}),Hooks.on("controlToken",()=>v(void 0,void 0,void 0,(function*(){const t=canvas.tokens.controlled[0],e=new T,o=new w((new n).load(game.settings),ui.hotbar,new m,e);if(t&&1==canvas.tokens.controlled.length){e.debug("[Token Hotbar]","controlled token",t);let r=P().load(t,duplicate(game.user.data.hotbar),game.macros.entities);r.hasMacros&&(yield game.user.update({hotbar:r.hotbar}),e.debug("[Token Hotbar]","updated hotbar",t,r.hotbar)),o.goToPage(r.hasMacros)}else o.goToPage(!1),e.debug("[Token Hotbar]","No or multiple controlled tokens");return!0}))),Hooks.on("preDeleteToken",(t,e)=>(P().remove(e._id),!0)),Hooks.on("preDeleteActor",t=>(P().remove(t.data._id),!0))}]);