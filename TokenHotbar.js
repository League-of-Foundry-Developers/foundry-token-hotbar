!function(t){var e={};function r(o){if(e[o])return e[o].exports;var a=e[o]={i:o,l:!1,exports:{}};return t[o].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=e,r.d=function(t,e,o){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(o,a,function(e){return t[e]}.bind(null,a));return o},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);const o="TokenHotbar";class a{constructor(){}load(t){return this.hotbarPage=this.getSetting(t,a.keys.hotbarPage),this.alwaysLinkToActor=this.getSetting(t,a.keys.alwaysLinkToActor),this.linkToLinkedActor=this.getSetting(t,a.keys.linkToLinkedActor)||this.alwaysLinkToActor,this.shareHotbar=this.getSetting(t,a.keys.shareHotbar),this.lockHotbar=this.getSetting(t,a.keys.lockHotbar)&&this.shareHotbar,this}getSetting(t,e){return t.get(o,e)}}a.keys={alwaysLinkToActor:"linkToActor",linkToLinkedActor:"link",hotbarPage:"page",shareHotbar:"share",lockHotbar:"lock"};class s{getEntity(t){return game.actors.get(t)||canvas.tokens.get(t)}}class n extends s{get(t){return t}}class i extends s{get(t){return"shared-macros"}}class g extends s{get(t){const e=this.getEntity(t);return e instanceof Token?(e.data.actorLink?e.actor:e).id:e.id}}class l extends s{get(t){const e=this.getEntity(t);return e instanceof Token?e.actor.id:e.id}}class h{constructor(t,e,r,o,a){this.hotbarFlag=t,this.notifier=e,this.currentPage=r,this.hotbarPage=o,this.flagKeyStrategy=a}save(t,e,r){if(this.currentPage!=this.hotbarPage)return!1;const o=this.getSlots();e=e.filter(t=>t.macro&&o.includes(t.slot));const a=this.flagKeyStrategy.get(t.id);let s=this.hotbarFlag.get(t.id)[a]||[];if(!this.hasChanges(e,s))return!1;if(!r)return this.notifier.warn("The token hotbar is locked for players. Any macros placed on this page will be replaced."),!1;let n=this.hotbarFlag.get(t.id);return n[a]=e.map(t=>({slot:t.slot,id:t.macro.id})),console.debug("[Token Hotbar]","Saving",a,n),this.hotbarFlag.set(t.id,n),!0}load(t,e,r){const o=this.hotbarFlag.get(t.id),a=this.flagKeyStrategy.get(t.id),s=o[a]||[];if(0===s.length)return{hasMacros:!1,hotbar:e};console.debug("[Token Hotbar]","Loading",a,s);let n=!1;for(let t of this.getSlots()){let o=s.find(e=>e.slot==t);if(!o)this.unset(e,t);else{let a=r.find(t=>t.id===o.id);a?(e[t]=a.id,n=!0):this.unset(e,t)}}return{hasMacros:n,hotbar:e}}remove(t){const e=(new n).get(t),r=this.hotbarFlag.get(t);delete r[e],this.hotbarFlag.set(t,r)}getSlots(){return function(t,e=0){return[...Array(t).keys()].map(t=>t+e)}(10,10*(this.hotbarPage-1)+1)}unset(t,e){delete t[e],t["-="+e]=null}hasChanges(t,e){if(this.currentPage!=this.hotbarPage)return!1;if(t.length!=e.length)return!0;for(let r=0;r<t.length;r++)if(t[r].macro._id!=e[r].id)return!0;return!1}}class c{constructor(t){this.getFlagStrategy=t}get(t){return this.getFlagStrategy.get(t).getFlag("world",o)||{}}set(t,e){return this.getFlagStrategy.get(t).unsetFlag("world",o).then(t=>t.setFlag("world",o,e))}}class u{getEntity(t){return game.actors.get(t)||canvas.tokens.get(t)}}class d extends u{get(t){return game.user}}class b extends u{get(t){const e=this.getEntity(t);return e instanceof Token&&e.data.actorLink?e.actor:e}}class k extends u{get(t){const e=this.getEntity(t);return e instanceof Token?e.actor:e}}class f{constructor(t){this.settings=t}create(){const t=this.createFlagStrategy();return new c(t)}createFlagStrategy(){return new y(this.settings).create()}}class y{constructor(t){this.settings=t}create(){if(this.settings.shareHotbar){if(this.settings.alwaysLinkToActor)return new k;if(this.settings.linkToLinkedActor)return new b}return new d}}class p{constructor(t){this.settings=t}create(){return this.settings.shareHotbar?new i:this.settings.alwaysLinkToActor?new l:this.settings.linkToLinkedActor?new g:new n}}class m{constructor(t,e,r){this.settings=t,this.hotbar=e,this.pageFlag=r}goToPage(t){t?this.goToTokenHotbar():this.goToLastActivePage()}goToTokenHotbar(){this.hotbar.page!=this.settings.hotbarPage&&this.pageFlag.set(this.hotbar.page),this.render(this.settings.hotbarPage)}goToLastActivePage(){this.hotbar.page==this.settings.hotbarPage&&this.render(this.pageFlag.get())}render(t){this.hotbar.page=t,setTimeout(()=>this.hotbar.render(!0),50)}}class w{get(){let t=localStorage.getItem(o+".activePage");return t?+t:1}set(t){return localStorage.setItem(o+".activePage",t+"")}}function T(){if(!game.user)return void setTimeout(T,200);let t=game.user.getFlag("world","token-hotbar"),e=game.user.getFlag("world",o);t&&!e?(console.info("[Token Hotbar]","Migrating to new flag key."),game.user.setFlag("world",o,t),game.user.unsetFlag("world","token-hotbar")):console.debug("[Token Hotbar]","Nothing to migrate.",!!t,!!e)}function P(){const t=(new a).load(game.settings),e=new f(t),r=new p(t);return new h(e.create(),ui.notifications,ui.hotbar.page,t.hotbarPage,r.create())}Hooks.on("init",()=>{game.settings.register(o,a.keys.hotbarPage,{name:"Page",hint:"The hotbar page that will be replaced with the token hotbar. Changing this will wipe existing token bars!",scope:"world",config:!0,default:5,type:Number}),game.settings.register(o,a.keys.linkToLinkedActor,{name:"Link to linked actor",hint:"Link the token hotbar to the actor if the token is linked.",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register(o,a.keys.alwaysLinkToActor,{name:"Always link to actor",hint:"Link the token hotbar to the actor even if the token is unlinked.",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register(o,a.keys.shareHotbar,{name:"Share the hotbar with other players",hint:"When set every token will have a single hotbar shared by all players.",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register(o,a.keys.lockHotbar,{name:"Lock shared hotbar",hint:"When set, only a GM can update the token hotbar. Only applies to shared hotbars.",scope:"world",config:!0,default:!1,type:Boolean}),console.log("initialized Token Hotbar"),setTimeout(T,200)}),Hooks.on("renderHotbar",t=>{const e=(new a).load(game.settings),r=ui.hotbar._getMacrosByPage(e.hotbarPage),o=canvas.tokens.controlled[0];return o&&P().save(o,r,!e.lockHotbar||game.user.isGM),!0}),Hooks.on("controlToken",()=>{const t=canvas.tokens.controlled[0],e=new m((new a).load(game.settings),ui.hotbar,new w);if(t){let r=P().load(t,duplicate(game.user.data.hotbar),game.macros.entities);r.hasMacros&&game.user.update({hotbar:r.hotbar}),e.goToPage(r.hasMacros)}else e.goToPage(!1);return!0}),Hooks.on("preDeleteToken",(t,e)=>(P().remove(e._id),!0)),Hooks.on("preDeleteActor",t=>(P().remove(t.data._id),!0))}]);