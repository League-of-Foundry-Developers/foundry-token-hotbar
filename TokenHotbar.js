!function(g){var t={};function I(n){if(t[n])return t[n].exports;var e=t[n]={i:n,l:!1,exports:{}};return g[n].call(e.exports,e,e.exports,I),e.l=!0,e.exports}I.m=g,I.c=t,I.d=function(g,t,n){I.o(g,t)||Object.defineProperty(g,t,{enumerable:!0,get:n})},I.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},I.t=function(g,t){if(1&t&&(g=I(g)),8&t)return g;if(4&t&&"object"==typeof g&&g&&g.__esModule)return g;var n=Object.create(null);if(I.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:g}),2&t&&"string"!=typeof g)for(var e in g)I.d(n,e,function(t){return g[t]}.bind(null,e));return n},I.n=function(g){var t=g&&g.__esModule?function(){return g.default}:function(){return g};return I.d(t,"a",t),t},I.o=function(g,t){return Object.prototype.hasOwnProperty.call(g,t)},I.p="",I(I.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/constants.ts\nconst CONSTANTS = {\n    moduleName: "TokenHotbar",\n};\n\n// CONCATENATED MODULE: ./src/settings.ts\n\nclass settings_Settings {\n    constructor() { }\n    load(s) {\n        this.hotbarPage = this.getSetting(s, settings_Settings.keys.hotbarPage);\n        this.alwaysLinkToActor = this.getSetting(s, settings_Settings.keys.alwaysLinkToActor);\n        this.linkToLinkedActor = this.getSetting(s, settings_Settings.keys.linkToLinkedActor) || this.alwaysLinkToActor;\n        this.shareHotbar = this.getSetting(s, settings_Settings.keys.shareHotbar);\n        this.lockHotbar = this.getSetting(s, settings_Settings.keys.lockHotbar) && this.shareHotbar;\n        return this;\n    }\n    getSetting(settings, key) {\n        return settings.get(CONSTANTS.moduleName, key);\n    }\n}\nsettings_Settings.keys = {\n    alwaysLinkToActor: \'linkToActor\',\n    linkToLinkedActor: \'link\',\n    hotbarPage: \'page\',\n    shareHotbar: \'share\',\n    lockHotbar: \'lock\'\n};\n\n// CONCATENATED MODULE: ./src/tokenHotbar.ts\nclass TokenHotbar {\n    constructor(settings, hotbarFlag, user, notifier, currentPage) {\n        this.settings = settings;\n        this.hotbarFlag = hotbarFlag;\n        this.user = user;\n        this.notifier = notifier;\n        this.currentPage = currentPage;\n    }\n    save(controlledTokens, macros) {\n        if (controlledTokens.length != 1)\n            return false;\n        if (this.currentPage != this.settings.hotbarPage)\n            return false;\n        const slots = this.getSlots();\n        const currentMacros = macros.filter(m => m.macro && slots.includes(m.slot));\n        const entity = this.getEntity(controlledTokens[0]);\n        let tokenMacros = this.hotbarFlag.get(entity)[entity.id] || [];\n        if (!this.hasChanges(currentMacros, tokenMacros))\n            return false;\n        if (!this.canSave()) {\n            this.notifier.warn("The token hotbar is locked for players. Any macros placed on this page will be replaced.");\n            return false;\n        }\n        let tokenBars = this.hotbarFlag.get(entity);\n        tokenBars[entity.id] = macros\n            .filter(m => m.macro && slots.includes(m.slot))\n            .map(item => {\n            return {\n                slot: item.slot,\n                id: item.macro._id\n            };\n        });\n        console.debug("[Token Hotbar]", "Saving", entity.id, tokenBars);\n        this.hotbarFlag.set(entity, tokenBars);\n        return true;\n    }\n    load(controlledTokens, userHotbar) {\n        if (controlledTokens.length != 1)\n            return Promise.resolve(false);\n        this.userHotbar = userHotbar;\n        const entity = this.getEntity(controlledTokens[0]);\n        const hotBars = this.hotbarFlag.get(entity)[entity.id] || [];\n        console.debug("[Token Hotbar]", "Loading", entity.id, hotBars);\n        for (let slot of this.getSlots()) {\n            let slotMacro = hotBars.find(m => m.slot == slot);\n            const tokenHotbarSlotIsEmpty = !slotMacro;\n            if (tokenHotbarSlotIsEmpty) {\n                this.unset(slot);\n            }\n            else {\n                let tokenMacro = game.macros.find((m) => m.id === slotMacro.id);\n                if (tokenMacro) {\n                    this.userHotbar[slot] = tokenMacro.id;\n                }\n                else {\n                    this.unset(slot);\n                }\n            }\n        }\n        return this.user.update({ hotbar: this.userHotbar })\n            .then(() => hotBars.length > 0);\n    }\n    remove(tokenId) {\n        const entity = game.actors.get(tokenId) || canvas.tokens.get(tokenId);\n        const flags = this.hotbarFlag.get(entity);\n        delete flags[entity.id];\n        this.hotbarFlag.set(entity, flags);\n    }\n    getEntity(token) {\n        if (this.settings.alwaysLinkToActor || (token.data.actorLink && this.settings.linkToLinkedActor)) {\n            return token.actor;\n        }\n        return token;\n    }\n    getSlots() {\n        function range(size, startAt = 0) {\n            return [...Array(size).keys()].map(i => i + startAt);\n        }\n        return range(10, (this.settings.hotbarPage - 1) * 10 + 1);\n    }\n    unset(slot) {\n        delete this.userHotbar[slot];\n        this.userHotbar[`-=${slot}`] = null;\n    }\n    canSave() {\n        return !this.settings.lockHotbar || this.user.isGM;\n    }\n    hasChanges(barMacros, tokenMacros) {\n        if (this.currentPage != this.settings.hotbarPage)\n            return false;\n        if (barMacros.length != tokenMacros.length)\n            return true;\n        for (let i = 0; i < barMacros.length; i++) {\n            if (barMacros[i].macro._id != tokenMacros[i].id)\n                return true;\n        }\n        return false;\n    }\n}\n\n// CONCATENATED MODULE: ./src/hotbarFlags.ts\n\nclass hotbarFlags_FoundryHotbarFlags {\n    constructor(settings) {\n        this.settings = settings;\n    }\n    get(entity) {\n        const flags = this.getFlags(entity);\n        const result = flags.getFlag(\'world\', CONSTANTS.moduleName) || {};\n        return result;\n    }\n    set(entity, data) {\n        return this.getFlags(entity)\n            .unsetFlag("world", CONSTANTS.moduleName)\n            .then(entity => entity.setFlag(\'world\', CONSTANTS.moduleName, data));\n    }\n    getFlags(entity) {\n        return this.settings.shareHotbar ? entity : game.user;\n    }\n}\n\n// CONCATENATED MODULE: ./src/userHotbar.ts\nclass UserHotbar {\n    constructor(settings, hotbar, pageFlag) {\n        this.settings = settings;\n        this.hotbar = hotbar;\n        this.pageFlag = pageFlag;\n    }\n    goToPage(hasTokenSelected) {\n        if (hasTokenSelected) {\n            this.goToTokenHotbar();\n        }\n        else {\n            this.goToLastActivePage();\n        }\n    }\n    goToTokenHotbar() {\n        if (this.hotbar.page != this.settings.hotbarPage)\n            this.pageFlag.set(this.hotbar.page);\n        this.render(this.settings.hotbarPage);\n    }\n    goToLastActivePage() {\n        if (this.hotbar.page != this.settings.hotbarPage)\n            return;\n        this.render(this.pageFlag.get());\n    }\n    render(page) {\n        this.hotbar.page = page;\n        setTimeout(() => this.hotbar.render(true), 50);\n    }\n}\n\n// CONCATENATED MODULE: ./src/pageFlag.ts\n\nclass pageFlag_PageFlag {\n    get() {\n        let page = localStorage.getItem(`${CONSTANTS.moduleName}.activePage`);\n        if (page)\n            return +page;\n        return 1;\n    }\n    set(page) {\n        return localStorage.setItem(`${CONSTANTS.moduleName}.activePage`, page + "");\n    }\n}\n\n// CONCATENATED MODULE: ./src/main.ts\n\n\n\n\n\n\nfunction migrateFlag() {\n    let oldData = game.user.getFlag("world", "token-hotbar");\n    let newData = game.user.getFlag("world", CONSTANTS.moduleName);\n    if (!oldData || newData)\n        return;\n    console.info("Migrating Token Hotbar...");\n    game.user.setFlag("world", CONSTANTS.moduleName, oldData);\n    game.user.unsetFlag("world", "token-hotbar");\n}\nfunction createTokenHotbar() {\n    const settings = new settings_Settings().load(game.settings);\n    const hotbarFlags = new hotbarFlags_FoundryHotbarFlags(settings);\n    return new TokenHotbar(settings, hotbarFlags, game.user, ui.notifications, ui.hotbar.page);\n}\nHooks.on("init", () => {\n    game.settings.register(CONSTANTS.moduleName, settings_Settings.keys.hotbarPage, {\n        name: "Page",\n        hint: "The hotbar page that will be replaced with the token hotbar. Changing this will wipe existing token bars!",\n        scope: "world",\n        config: true,\n        default: 5,\n        type: Number\n    });\n    game.settings.register(CONSTANTS.moduleName, settings_Settings.keys.linkToLinkedActor, {\n        name: "Link to linked actor",\n        hint: "Link the token hotbar to the actor if the token is linked.",\n        scope: "world",\n        config: true,\n        default: true,\n        type: Boolean\n    });\n    game.settings.register(CONSTANTS.moduleName, settings_Settings.keys.alwaysLinkToActor, {\n        name: "Always link to actor",\n        hint: "Link the token hotbar to the actor even if the token is unlinked.",\n        scope: "world",\n        config: true,\n        default: false,\n        type: Boolean\n    });\n    game.settings.register(CONSTANTS.moduleName, settings_Settings.keys.shareHotbar, {\n        name: "Share the hotbar with other players",\n        hint: "When set every token will have a single hotbar shared by all players.",\n        scope: "world",\n        config: true,\n        default: false,\n        type: Boolean\n    });\n    game.settings.register(CONSTANTS.moduleName, settings_Settings.keys.lockHotbar, {\n        name: "Lock shared hotbar",\n        hint: "When set, only a GM can update the token hotbar. Only applies to shared hotbars.",\n        scope: "world",\n        config: true,\n        default: false,\n        type: Boolean\n    });\n    console.log("initialized Token Hotbar");\n    setTimeout(migrateFlag, 200);\n});\nHooks.on("renderHotbar", (data) => {\n    const settings = new settings_Settings().load(game.settings);\n    const macros = ui.hotbar._getMacrosByPage(settings.hotbarPage);\n    const controlledTokens = canvas.tokens.controlled;\n    createTokenHotbar().save(controlledTokens, macros);\n    return true;\n});\nHooks.on("controlToken", (token, isControlled) => {\n    const controlledTokens = canvas.tokens.controlled;\n    const pIsLoaded = createTokenHotbar().load(controlledTokens, duplicate(game.user.data.hotbar));\n    pIsLoaded.then(isLoaded => {\n        const hotbar = new UserHotbar(new settings_Settings().load(game.settings), ui.hotbar, new pageFlag_PageFlag());\n        hotbar.goToPage(isLoaded);\n    });\n    return true;\n});\nHooks.on("preDeleteToken", (_, token) => {\n    createTokenHotbar().remove(token._id);\n    return true;\n});\nHooks.on("preDeleteActor", (actor) => {\n    createTokenHotbar().remove(actor.data._id);\n    return true;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);