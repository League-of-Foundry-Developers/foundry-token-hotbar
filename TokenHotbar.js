!function(g){var I={};function t(n){if(I[n])return I[n].exports;var e=I[n]={i:n,l:!1,exports:{}};return g[n].call(e.exports,e,e.exports,t),e.l=!0,e.exports}t.m=g,t.c=I,t.d=function(g,I,n){t.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:n})},t.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},t.t=function(g,I){if(1&I&&(g=t(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var e in g)t.d(n,e,function(I){return g[I]}.bind(null,e));return n},t.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return t.d(I,"a",I),I},t.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},t.p="",t(t.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/constants.ts\nconst CONSTANTS = {\n    moduleName: "TokenHotbar",\n};\n\n// CONCATENATED MODULE: ./src/settings.ts\n\nclass settings_Settings {\n    constructor() { }\n    load(s) {\n        this.hotbarPage = this.getSetting(s, settings_Settings.keys.hotbarPage);\n        this.alwaysLinkToActor = this.getSetting(s, settings_Settings.keys.alwaysLinkToActor);\n        this.linkToLinkedActor = this.getSetting(s, settings_Settings.keys.linkToLinkedActor) || this.alwaysLinkToActor;\n        this.shareHotbar = this.getSetting(s, settings_Settings.keys.shareHotbar);\n        this.lockHotbar = this.getSetting(s, settings_Settings.keys.lockHotbar) && this.shareHotbar;\n        return this;\n    }\n    getSetting(settings, key) {\n        return settings.get(CONSTANTS.moduleName, key);\n    }\n}\nsettings_Settings.keys = {\n    alwaysLinkToActor: \'linkToActor\',\n    linkToLinkedActor: \'link\',\n    hotbarPage: \'page\',\n    shareHotbar: \'share\',\n    lockHotbar: \'lock\'\n};\n\n// CONCATENATED MODULE: ./src/hotbar/tokenHotbar.ts\nclass TokenHotbar {\n    constructor(hotbarFlag, notifier, currentPage, hotbarPage, flagKeyStrategy) {\n        this.hotbarFlag = hotbarFlag;\n        this.notifier = notifier;\n        this.currentPage = currentPage;\n        this.hotbarPage = hotbarPage;\n        this.flagKeyStrategy = flagKeyStrategy;\n    }\n    save(token, macrosToSave, canSave) {\n        if (this.currentPage != this.hotbarPage)\n            return false;\n        const slots = this.getSlots();\n        macrosToSave = macrosToSave.filter(m => m.macro && slots.includes(m.slot));\n        const flagKey = this.flagKeyStrategy.get(token.id);\n        let tokenMacros = this.hotbarFlag.get(token.id)[flagKey] || [];\n        if (!this.hasChanges(macrosToSave, tokenMacros))\n            return false;\n        if (!canSave) {\n            this.notifier.warn("The token hotbar is locked for players. Any macros placed on this page will be replaced.");\n            return false;\n        }\n        let tokenBars = this.hotbarFlag.get(token.id);\n        tokenBars[flagKey] = macrosToSave\n            .map(item => {\n            return {\n                slot: item.slot,\n                id: item.macro.id\n            };\n        });\n        console.debug("[Token Hotbar]", "Saving", flagKey, tokenBars);\n        this.hotbarFlag.set(token.id, tokenBars);\n        return true;\n    }\n    load(token, userHotbar, gameMacros) {\n        const tokenHotbars = this.hotbarFlag.get(token.id);\n        const flagKey = this.flagKeyStrategy.get(token.id);\n        const tokenHotbar = tokenHotbars[flagKey] || [];\n        if (tokenHotbar.length === 0)\n            return { hasMacros: false, hotbar: userHotbar };\n        console.debug("[Token Hotbar]", "Loading", flagKey, tokenHotbar);\n        let hasValidMacros = false;\n        for (let slot of this.getSlots()) {\n            let slotMacro = tokenHotbar.find(m => m.slot == slot);\n            const tokenHotbarSlotIsEmpty = !slotMacro;\n            if (tokenHotbarSlotIsEmpty) {\n                this.unset(userHotbar, slot);\n            }\n            else {\n                let tokenMacro = gameMacros.find(m => m.id === slotMacro.id);\n                if (tokenMacro) {\n                    userHotbar[slot] = tokenMacro.id;\n                    hasValidMacros = true;\n                }\n                else {\n                    this.unset(userHotbar, slot);\n                }\n            }\n        }\n        return { hasMacros: hasValidMacros, hotbar: userHotbar };\n    }\n    remove(tokenId) {\n        const flagKey = this.flagKeyStrategy.get(tokenId);\n        const flags = this.hotbarFlag.get(tokenId);\n        delete flags[flagKey];\n        this.hotbarFlag.set(tokenId, flags);\n    }\n    getSlots() {\n        function range(size, startAt = 0) {\n            return [...Array(size).keys()].map(i => i + startAt);\n        }\n        return range(10, (this.hotbarPage - 1) * 10 + 1);\n    }\n    unset(userHotbar, slot) {\n        delete userHotbar[slot];\n        userHotbar[`-=${slot}`] = null;\n    }\n    hasChanges(barMacros, tokenMacros) {\n        if (this.currentPage != this.hotbarPage)\n            return false;\n        if (barMacros.length != tokenMacros.length)\n            return true;\n        for (let i = 0; i < barMacros.length; i++) {\n            if (barMacros[i].macro._id != tokenMacros[i].id)\n                return true;\n        }\n        return false;\n    }\n}\n\n// CONCATENATED MODULE: ./src/flags/hotbarFlags.ts\n\nclass hotbarFlags_FoundryHotbarFlags {\n    constructor(getFlagStrategy) {\n        this.getFlagStrategy = getFlagStrategy;\n    }\n    get(tokenId) {\n        const flags = this.getFlagStrategy.get(tokenId);\n        const result = flags.getFlag(\'world\', CONSTANTS.moduleName) || {};\n        return result;\n    }\n    set(tokenId, data) {\n        return this.getFlagStrategy.get(tokenId)\n            .unsetFlag("world", CONSTANTS.moduleName)\n            .then(entity => entity.setFlag(\'world\', CONSTANTS.moduleName, data));\n    }\n}\n\n// CONCATENATED MODULE: ./src/flags/flagStrategies.ts\nclass FlagsStrategy {\n    getEntity(entityId) {\n        return game.actors.get(entityId) || canvas.tokens.get(entityId);\n    }\n}\nclass DefaultFlagsStrategy extends FlagsStrategy {\n    get(_) {\n        return game.user;\n    }\n}\nclass SharedLinkedFlagsStrategy extends FlagsStrategy {\n    get(entityId) {\n        const entity = this.getEntity(entityId);\n        if (entity instanceof Token) {\n            return entity.data.actorLink ? entity.actor : entity;\n        }\n        return entity;\n    }\n}\nclass SharedAlwaysLinkedFlagsStrategy extends FlagsStrategy {\n    get(entityId) {\n        const entity = this.getEntity(entityId);\n        if (entity instanceof Token) {\n            return entity.actor;\n        }\n        return entity;\n    }\n}\n\n// CONCATENATED MODULE: ./src/flags/flagKeyStrategies.ts\nclass FlagKeyStrategy {\n    getEntity(entityId) {\n        return game.actors.get(entityId) || canvas.tokens.get(entityId);\n    }\n}\nclass DefaultFlagKeyStrategy extends FlagKeyStrategy {\n    get(entityId) {\n        return entityId;\n    }\n}\nclass SharedFlagKeyStrategy extends FlagKeyStrategy {\n    get(_) {\n        return "shared-macros";\n    }\n}\nclass LinkedFlagKeyStrategy extends FlagKeyStrategy {\n    get(entityId) {\n        const entity = this.getEntity(entityId);\n        if (entity instanceof Token) {\n            return (entity.data.actorLink ? entity.actor : entity).id;\n        }\n        return entity.id;\n    }\n}\nclass AlwaysLinkedFlagKeyStrategy extends FlagKeyStrategy {\n    get(entityId) {\n        const entity = this.getEntity(entityId);\n        if (entity instanceof Token) {\n            return entity.actor.id;\n        }\n        return entity.id;\n    }\n}\n\n// CONCATENATED MODULE: ./src/flags/factory.ts\n\n\n\nclass factory_HotbarFlagsFactory {\n    constructor(settings) {\n        this.settings = settings;\n    }\n    create() {\n        const flagStrategy = this.createFlagStrategy();\n        return new hotbarFlags_FoundryHotbarFlags(flagStrategy);\n    }\n    createFlagStrategy() {\n        return new factory_FlagStrategyFactory(this.settings).create();\n    }\n}\nclass factory_FlagStrategyFactory {\n    constructor(settings) {\n        this.settings = settings;\n    }\n    create() {\n        if (this.settings.shareHotbar) {\n            if (this.settings.alwaysLinkToActor) {\n                return new SharedAlwaysLinkedFlagsStrategy();\n            }\n            if (this.settings.linkToLinkedActor) {\n                return new SharedLinkedFlagsStrategy();\n            }\n        }\n        return new DefaultFlagsStrategy();\n    }\n}\nclass factory_FlagKeyFactory {\n    constructor(settings) {\n        this.settings = settings;\n    }\n    create() {\n        if (this.settings.shareHotbar)\n            return new SharedFlagKeyStrategy();\n        if (this.settings.alwaysLinkToActor)\n            return new AlwaysLinkedFlagKeyStrategy();\n        if (this.settings.linkToLinkedActor)\n            return new LinkedFlagKeyStrategy();\n        return new DefaultFlagKeyStrategy();\n    }\n}\n\n// CONCATENATED MODULE: ./src/hotbar/userHotbar.ts\nclass UserHotbar {\n    constructor(settings, hotbar, pageFlag) {\n        this.settings = settings;\n        this.hotbar = hotbar;\n        this.pageFlag = pageFlag;\n    }\n    goToPage(hasTokenSelected) {\n        if (hasTokenSelected) {\n            this.goToTokenHotbar();\n        }\n        else {\n            this.goToLastActivePage();\n        }\n    }\n    goToTokenHotbar() {\n        if (this.hotbar.page != this.settings.hotbarPage)\n            this.pageFlag.set(this.hotbar.page);\n        this.render(this.settings.hotbarPage);\n    }\n    goToLastActivePage() {\n        if (this.hotbar.page != this.settings.hotbarPage)\n            return;\n        this.render(this.pageFlag.get());\n    }\n    render(page) {\n        this.hotbar.page = page;\n        setTimeout(() => this.hotbar.render(true), 50);\n    }\n}\n\n// CONCATENATED MODULE: ./src/flags/pageFlag.ts\n\nclass pageFlag_PageFlag {\n    get() {\n        let page = localStorage.getItem(`${CONSTANTS.moduleName}.activePage`);\n        if (page)\n            return +page;\n        return 1;\n    }\n    set(page) {\n        return localStorage.setItem(`${CONSTANTS.moduleName}.activePage`, page + "");\n    }\n}\n\n// CONCATENATED MODULE: ./src/main.ts\n\n\n\n\n\n\nfunction migrateFlag() {\n    let oldData = game.user.getFlag("world", "token-hotbar");\n    let newData = game.user.getFlag("world", CONSTANTS.moduleName);\n    if (!oldData || newData)\n        return;\n    console.info("Migrating Token Hotbar...");\n    game.user.setFlag("world", CONSTANTS.moduleName, oldData);\n    game.user.unsetFlag("world", "token-hotbar");\n}\nfunction createTokenHotbar() {\n    const settings = new settings_Settings().load(game.settings);\n    const hotbarFlags = new factory_HotbarFlagsFactory(settings);\n    const keyStrategy = new factory_FlagKeyFactory(settings);\n    return new TokenHotbar(hotbarFlags.create(), ui.notifications, ui.hotbar.page, settings.hotbarPage, keyStrategy.create());\n}\nHooks.on("init", () => {\n    game.settings.register(CONSTANTS.moduleName, settings_Settings.keys.hotbarPage, {\n        name: "Page",\n        hint: "The hotbar page that will be replaced with the token hotbar. Changing this will wipe existing token bars!",\n        scope: "world",\n        config: true,\n        default: 5,\n        type: Number\n    });\n    game.settings.register(CONSTANTS.moduleName, settings_Settings.keys.linkToLinkedActor, {\n        name: "Link to linked actor",\n        hint: "Link the token hotbar to the actor if the token is linked.",\n        scope: "world",\n        config: true,\n        default: true,\n        type: Boolean\n    });\n    game.settings.register(CONSTANTS.moduleName, settings_Settings.keys.alwaysLinkToActor, {\n        name: "Always link to actor",\n        hint: "Link the token hotbar to the actor even if the token is unlinked.",\n        scope: "world",\n        config: true,\n        default: false,\n        type: Boolean\n    });\n    game.settings.register(CONSTANTS.moduleName, settings_Settings.keys.shareHotbar, {\n        name: "Share the hotbar with other players",\n        hint: "When set every token will have a single hotbar shared by all players.",\n        scope: "world",\n        config: true,\n        default: false,\n        type: Boolean\n    });\n    game.settings.register(CONSTANTS.moduleName, settings_Settings.keys.lockHotbar, {\n        name: "Lock shared hotbar",\n        hint: "When set, only a GM can update the token hotbar. Only applies to shared hotbars.",\n        scope: "world",\n        config: true,\n        default: false,\n        type: Boolean\n    });\n    console.log("initialized Token Hotbar");\n    setTimeout(migrateFlag, 200);\n});\nHooks.on("renderHotbar", (data) => {\n    const settings = new settings_Settings().load(game.settings);\n    const macros = ui.hotbar._getMacrosByPage(settings.hotbarPage);\n    const token = canvas.tokens.controlled[0];\n    if (token)\n        createTokenHotbar().save(token, macros, !settings.lockHotbar || game.user.isGM);\n    return true;\n});\nHooks.on("controlToken", () => {\n    const token = canvas.tokens.controlled[0];\n    const uiHotbar = new UserHotbar(new settings_Settings().load(game.settings), ui.hotbar, new pageFlag_PageFlag());\n    if (token) {\n        let result = createTokenHotbar()\n            .load(token, duplicate(game.user.data.hotbar), game.macros.entities);\n        if (result.hasMacros) {\n            game.user.update({ hotbar: result.hotbar });\n        }\n        uiHotbar.goToPage(result.hasMacros);\n    }\n    else {\n        uiHotbar.goToPage(false);\n    }\n    return true;\n});\nHooks.on("preDeleteToken", (_, token) => {\n    createTokenHotbar().remove(token._id);\n    return true;\n});\nHooks.on("preDeleteActor", (actor) => {\n    createTokenHotbar().remove(actor.data._id);\n    return true;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb25zdGFudHMudHM/ODVlZSIsIndlYnBhY2s6Ly8vLi9zcmMvc2V0dGluZ3MudHM/OGI5OSIsIndlYnBhY2s6Ly8vLi9zcmMvaG90YmFyL3Rva2VuSG90YmFyLnRzP2FjOTUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZsYWdzL2hvdGJhckZsYWdzLnRzP2FkNjYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZsYWdzL2ZsYWdTdHJhdGVnaWVzLnRzP2I4NTciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZsYWdzL2ZsYWdLZXlTdHJhdGVnaWVzLnRzPzlkNDMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZsYWdzL2ZhY3RvcnkudHM/M2ZiZSIsIndlYnBhY2s6Ly8vLi9zcmMvaG90YmFyL3VzZXJIb3RiYXIudHM/YzFkOSIsIndlYnBhY2s6Ly8vLi9zcmMvZmxhZ3MvcGFnZUZsYWcudHM/ZTE3YSIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cz9jZDQ5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBDT05TVEFOVFMgPSB7XG4gICAgbW9kdWxlTmFtZTogXCJUb2tlbkhvdGJhclwiLFxufSIsImltcG9ydCB7IENPTlNUQU5UUyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsaWVudFNldHRpbmdzUmVhZGVyIHtcbiAgICBnZXQoc2NvcGU6IHN0cmluZywga2V5OiBzdHJpbmcpOiBhbnk7XG59XG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5ncyB7XG4gICAgYWx3YXlzTGlua1RvQWN0b3I6IGJvb2xlYW47XG4gICAgbGlua1RvTGlua2VkQWN0b3I6IGJvb2xlYW47XG4gICAgaG90YmFyUGFnZTogbnVtYmVyO1xuICAgIHNoYXJlSG90YmFyOiBib29sZWFuO1xuICAgIGxvY2tIb3RiYXI6IGJvb2xlYW47XG5cbiAgICBzdGF0aWMga2V5cyA9IHtcbiAgICAgICAgYWx3YXlzTGlua1RvQWN0b3I6ICdsaW5rVG9BY3RvcicsXG4gICAgICAgIGxpbmtUb0xpbmtlZEFjdG9yOiAnbGluaycsXG4gICAgICAgIGhvdGJhclBhZ2U6ICdwYWdlJyxcbiAgICAgICAgc2hhcmVIb3RiYXI6ICdzaGFyZScsXG4gICAgICAgIGxvY2tIb3RiYXI6ICdsb2NrJ1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBwdWJsaWMgbG9hZChzOiBDbGllbnRTZXR0aW5nc1JlYWRlcikge1xuICAgICAgICB0aGlzLmhvdGJhclBhZ2UgPSB0aGlzLmdldFNldHRpbmcocywgU2V0dGluZ3Mua2V5cy5ob3RiYXJQYWdlKTtcblxuICAgICAgICB0aGlzLmFsd2F5c0xpbmtUb0FjdG9yID0gdGhpcy5nZXRTZXR0aW5nKHMsIFNldHRpbmdzLmtleXMuYWx3YXlzTGlua1RvQWN0b3IpO1xuICAgICAgICB0aGlzLmxpbmtUb0xpbmtlZEFjdG9yID0gdGhpcy5nZXRTZXR0aW5nKHMsIFNldHRpbmdzLmtleXMubGlua1RvTGlua2VkQWN0b3IpIHx8IHRoaXMuYWx3YXlzTGlua1RvQWN0b3I7XG5cbiAgICAgICAgdGhpcy5zaGFyZUhvdGJhciA9IHRoaXMuZ2V0U2V0dGluZyhzLCBTZXR0aW5ncy5rZXlzLnNoYXJlSG90YmFyKTtcbiAgICAgICAgdGhpcy5sb2NrSG90YmFyID0gdGhpcy5nZXRTZXR0aW5nKHMsIFNldHRpbmdzLmtleXMubG9ja0hvdGJhcikgJiYgdGhpcy5zaGFyZUhvdGJhcjtcbiAgICBcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRTZXR0aW5nKHNldHRpbmdzOiBDbGllbnRTZXR0aW5nc1JlYWRlciwga2V5OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHNldHRpbmdzLmdldChDT05TVEFOVFMubW9kdWxlTmFtZSwga2V5KVxuICAgIH1cbn0iLCJpbXBvcnQgeyBIb3RiYXJGbGFncywgfSBmcm9tIFwiLi4vZmxhZ3MvaG90YmFyRmxhZ3NcIjtcbmltcG9ydCB7IE5vdGlmaWVyLCBJZGVudGlmaWFibGUsIE1hY3JvLCBVc2VyIH0gZnJvbSBcIi4uL2ZvdW5kcnlcIjtcbmltcG9ydCB7IEZsYWdLZXlTdHJhdGVneSB9IGZyb20gXCIuLi9mbGFncy9mbGFnS2V5U3RyYXRlZ2llc1wiO1xuXG5leHBvcnQgY2xhc3MgVG9rZW5Ib3RiYXIgeyBcbiAgICAvLyBEZXYgbm90ZTogbm90IGZvbmQgb2YgdGhpcyBtYW55IHBhcmFtZXRlcnMuIFxuICAgIC8vIEhvd2V2ZXIsIGZyb20gdjMgKHNlcGFyYXRlIGhvdGJhcikgb24gYXQgbGVhc3QgdHdvIHdpbGwgYmUgb2Jzb2xldGUgKHBhZ2VzKVxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGhvdGJhckZsYWc6IEhvdGJhckZsYWdzLFxuICAgICAgICBwcml2YXRlIG5vdGlmaWVyOiBOb3RpZmllcixcbiAgICAgICAgcHJpdmF0ZSBjdXJyZW50UGFnZTogbnVtYmVyLFxuICAgICAgICBwcml2YXRlIGhvdGJhclBhZ2U6IG51bWJlcixcbiAgICAgICAgcHJpdmF0ZSBmbGFnS2V5U3RyYXRlZ3k6IEZsYWdLZXlTdHJhdGVneSkgeyB9XG5cbiAgICBwdWJsaWMgc2F2ZSh0b2tlbjogSWRlbnRpZmlhYmxlLCBtYWNyb3NUb1NhdmU6IE1hY3JvW10sIGNhblNhdmU6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgIT0gdGhpcy5ob3RiYXJQYWdlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgY29uc3Qgc2xvdHMgPSB0aGlzLmdldFNsb3RzKCk7XG4gICAgICAgIG1hY3Jvc1RvU2F2ZSA9IG1hY3Jvc1RvU2F2ZS5maWx0ZXIobSA9PiBtLm1hY3JvICYmIHNsb3RzLmluY2x1ZGVzKG0uc2xvdCkpO1xuICAgICAgICBjb25zdCBmbGFnS2V5ID0gdGhpcy5mbGFnS2V5U3RyYXRlZ3kuZ2V0KHRva2VuLmlkKTtcbiAgICAgICAgbGV0IHRva2VuTWFjcm9zID0gdGhpcy5ob3RiYXJGbGFnLmdldCh0b2tlbi5pZClbZmxhZ0tleV0gfHwgW107XG5cbiAgICAgICAgLy8gRklYTUU6IHRoaXMgc2VlbXMgdmVyeSBpbmVmZmljaWVudFxuICAgICAgICAvLyAgICAgICAgd2lsbCBiZWNvbWUgdW5uZWNlc3NhcnkgaW4gdjMuMC4wXG4gICAgICAgIC8vICAgICAgICAhIFdpbGwgYmUgdW5uZWNlc3NhcnkgdG8gZml4IGluIHYzLjAuMCAoc2VwYXJhdGUgaG90YmFyLCBhbGwgcGFnZXMvc2xvdHMgd2lsbCBiZSByZWxldmFudClcbiAgICAgICAgaWYgKCF0aGlzLmhhc0NoYW5nZXMobWFjcm9zVG9TYXZlLCB0b2tlbk1hY3JvcykpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCFjYW5TYXZlKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWVyLndhcm4oXCJUaGUgdG9rZW4gaG90YmFyIGlzIGxvY2tlZCBmb3IgcGxheWVycy4gQW55IG1hY3JvcyBwbGFjZWQgb24gdGhpcyBwYWdlIHdpbGwgYmUgcmVwbGFjZWQuXCIpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdG9rZW5CYXJzID0gdGhpcy5ob3RiYXJGbGFnLmdldCh0b2tlbi5pZCk7XG5cbiAgICAgICAgdG9rZW5CYXJzW2ZsYWdLZXldID0gbWFjcm9zVG9TYXZlXG4gICAgICAgICAgICAubWFwKGl0ZW0gPT4geyBcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzbG90OiBpdGVtLnNsb3QsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLm1hY3JvLmlkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIltUb2tlbiBIb3RiYXJdXCIsIFwiU2F2aW5nXCIsIGZsYWdLZXksIHRva2VuQmFycyk7XG5cbiAgICAgICAgdGhpcy5ob3RiYXJGbGFnLnNldCh0b2tlbi5pZCwgdG9rZW5CYXJzKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIC8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgdG9rZW4gaGFzIG1hY3JvcyBvbiB0aGUgdG9rZW4gaG90YmFyXG4gICAgLy8gICAgICAgICBvdGhlcndpc2UgZmFsc2VcbiAgICBwdWJsaWMgbG9hZCh0b2tlbjogVG9rZW4sIHVzZXJIb3RiYXI6IG9iamVjdCwgZ2FtZU1hY3JvczogSWRlbnRpZmlhYmxlW10pIHtcbiAgICAgICAgY29uc3QgdG9rZW5Ib3RiYXJzID0gdGhpcy5ob3RiYXJGbGFnLmdldCh0b2tlbi5pZCk7XG4gICAgICAgIGNvbnN0IGZsYWdLZXkgPSB0aGlzLmZsYWdLZXlTdHJhdGVneS5nZXQodG9rZW4uaWQpO1xuICAgICAgICBjb25zdCB0b2tlbkhvdGJhciA9IHRva2VuSG90YmFyc1tmbGFnS2V5XSB8fCBbXTtcblxuICAgICAgICBpZiAodG9rZW5Ib3RiYXIubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHsgaGFzTWFjcm9zOiBmYWxzZSwgaG90YmFyOiB1c2VySG90YmFyIH07XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmRlYnVnKFwiW1Rva2VuIEhvdGJhcl1cIiwgXCJMb2FkaW5nXCIsIGZsYWdLZXksIHRva2VuSG90YmFyKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBoYXNWYWxpZE1hY3JvcyA9IGZhbHNlO1xuICAgICAgICBmb3IobGV0IHNsb3Qgb2YgdGhpcy5nZXRTbG90cygpKSB7XG4gICAgICAgICAgICBsZXQgc2xvdE1hY3JvID0gdG9rZW5Ib3RiYXIuZmluZChtID0+IG0uc2xvdCA9PSBzbG90KTtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuSG90YmFyU2xvdElzRW1wdHkgPSAhc2xvdE1hY3JvO1xuICAgICAgICAgICAgaWYgKHRva2VuSG90YmFyU2xvdElzRW1wdHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc2V0KHVzZXJIb3RiYXIsIHNsb3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHRva2VuTWFjcm8gPSBnYW1lTWFjcm9zLmZpbmQobSA9PiBtLmlkID09PSBzbG90TWFjcm8hLmlkKTtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW5NYWNybykge1xuICAgICAgICAgICAgICAgICAgICB1c2VySG90YmFyW3Nsb3RdID0gdG9rZW5NYWNyby5pZDtcbiAgICAgICAgICAgICAgICAgICAgaGFzVmFsaWRNYWNyb3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnNldCh1c2VySG90YmFyLCBzbG90KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBoYXNNYWNyb3M6IGhhc1ZhbGlkTWFjcm9zLCBob3RiYXI6IHVzZXJIb3RiYXIgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlKHRva2VuSWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBmbGFnS2V5ID0gdGhpcy5mbGFnS2V5U3RyYXRlZ3kuZ2V0KHRva2VuSWQpO1xuICAgICAgICBjb25zdCBmbGFncyA9IHRoaXMuaG90YmFyRmxhZy5nZXQodG9rZW5JZCk7XG4gICAgICAgIGRlbGV0ZSBmbGFnc1tmbGFnS2V5XTtcbiAgICAgICAgdGhpcy5ob3RiYXJGbGFnLnNldCh0b2tlbklkLCBmbGFncyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRTbG90cygpIHtcbiAgICAgICAgZnVuY3Rpb24gcmFuZ2Uoc2l6ZTogbnVtYmVyLCBzdGFydEF0ID0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFsuLi5BcnJheShzaXplKS5rZXlzKCldLm1hcChpID0+IGkgKyBzdGFydEF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByYW5nZSgxMCwgKHRoaXMuaG90YmFyUGFnZSAtIDEpICogMTAgKyAxKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVuc2V0KHVzZXJIb3RiYXIsIHNsb3Q6IG51bWJlcikge1xuICAgICAgICBkZWxldGUgdXNlckhvdGJhcltzbG90XTtcbiAgICAgICAgdXNlckhvdGJhcltgLT0ke3Nsb3R9YF0gPSBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFzQ2hhbmdlcyhiYXJNYWNyb3MsIHRva2VuTWFjcm9zKSB7XG4gICAgICAgIC8vIGNhbnQgbWFrZSBjaGFuZ2VzIGlmIHlvdSBhcmUgbm90IG9uIHRoZSBwYWdlXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlICE9IHRoaXMuaG90YmFyUGFnZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoYmFyTWFjcm9zLmxlbmd0aCAhPSB0b2tlbk1hY3Jvcy5sZW5ndGgpIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBiYXJNYWNyb3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChiYXJNYWNyb3NbaV0ubWFjcm8uX2lkICE9IHRva2VuTWFjcm9zW2ldLmlkKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBDT05TVEFOVFMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRmxhZ3NTdHJhdGVneSB9IGZyb20gJy4vZmxhZ1N0cmF0ZWdpZXMnO1xuaW1wb3J0IHsgRmxhZ2dhYmxlIH0gZnJvbSAnLi4vZm91bmRyeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSG90YmFySXRlbSB7XG4gICAgaWQ6IHN0cmluZyxcbiAgICBzbG90OiBOdW1iZXJcbn1cblxuZXhwb3J0IHR5cGUgSG90YmFyRGF0YSA9IHsgW3Rva2VuSWQ6IHN0cmluZ106IEhvdGJhckl0ZW1bXSB9O1xuXG5leHBvcnQgaW50ZXJmYWNlIEhvdGJhckZsYWdzIHsgXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBob3RiYXIgZm9yIGEgcGFydGljdWxhciBlbnRpdHkuXG4gICAgICogUE9TVDogUmV0dXJuIHZhbHVlIGlzIGFsd2F5cyBhbiBvYmplY3QuXG4gICAgICogQHBhcmFtIGVudGl0eSB0aGUgdG9rZW4gb3IgYWN0b3IgdG8gZ2V0IHRoZSBob3RiYXIgZm9yLlxuICAgICAqL1xuICAgIGdldCh0b2tlbklkOiBzdHJpbmcpOiBIb3RiYXJEYXRhO1xuXG4gICAgc2V0KHRva2VuSWQ6IHN0cmluZywgZGF0YTogSG90YmFyRGF0YSk6IFByb21pc2U8RmxhZ2dhYmxlPjtcbn1cblxuZXhwb3J0IGNsYXNzIEZvdW5kcnlIb3RiYXJGbGFncyBpbXBsZW1lbnRzIEhvdGJhckZsYWdzIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGdldEZsYWdTdHJhdGVneTogRmxhZ3NTdHJhdGVneSkgeyB9XG5cbiAgICBnZXQodG9rZW5JZDogc3RyaW5nKTogSG90YmFyRGF0YSB7XG4gICAgICAgIGNvbnN0IGZsYWdzID0gdGhpcy5nZXRGbGFnU3RyYXRlZ3kuZ2V0KHRva2VuSWQpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBmbGFncy5nZXRGbGFnKCd3b3JsZCcsIENPTlNUQU5UUy5tb2R1bGVOYW1lKSB8fCB7fTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBzZXQodG9rZW5JZDogc3RyaW5nLCBkYXRhOiBIb3RiYXJEYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEZsYWdTdHJhdGVneS5nZXQodG9rZW5JZClcbiAgICAgICAgICAgIC51bnNldEZsYWcoXCJ3b3JsZFwiLCBDT05TVEFOVFMubW9kdWxlTmFtZSlcbiAgICAgICAgICAgIC50aGVuKGVudGl0eSA9PiBlbnRpdHkuc2V0RmxhZygnd29ybGQnLCBDT05TVEFOVFMubW9kdWxlTmFtZSwgZGF0YSkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEZsYWdnYWJsZSB9IGZyb20gXCIuLi9mb3VuZHJ5XCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGbGFnc1N0cmF0ZWd5IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZW50aXR5SWQgVGhlIGlkIG9mIHRoZSBhY3RvciBvciB0b2tlblxuICAgICAqL1xuICAgIGFic3RyYWN0IGdldChlbnRpdHlJZDogc3RyaW5nKTogRmxhZ2dhYmxlO1xuXG4gICAgcHJvdGVjdGVkIGdldEVudGl0eShlbnRpdHlJZDogc3RyaW5nKSA6IEFjdG9yIHwgVG9rZW4ge1xuICAgICAgICByZXR1cm4gZ2FtZS5hY3RvcnMuZ2V0KGVudGl0eUlkKSB8fCBjYW52YXMudG9rZW5zLmdldChlbnRpdHlJZCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGVmYXVsdEZsYWdzU3RyYXRlZ3kgZXh0ZW5kcyBGbGFnc1N0cmF0ZWd5IHtcbiAgICBnZXQoXzogc3RyaW5nKTogRmxhZ2dhYmxlIHtcbiAgICAgICAgcmV0dXJuIGdhbWUudXNlcjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaGFyZWRMaW5rZWRGbGFnc1N0cmF0ZWd5IGV4dGVuZHMgRmxhZ3NTdHJhdGVneSB7XG4gICAgZ2V0KGVudGl0eUlkOiBzdHJpbmcpOiBGbGFnZ2FibGUge1xuICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmdldEVudGl0eShlbnRpdHlJZCk7XG4gICAgICAgIGlmIChlbnRpdHkgaW5zdGFuY2VvZiBUb2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIGVudGl0eS5kYXRhLmFjdG9yTGluayA/IGVudGl0eS5hY3RvciA6IGVudGl0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2hhcmVkQWx3YXlzTGlua2VkRmxhZ3NTdHJhdGVneSBleHRlbmRzIEZsYWdzU3RyYXRlZ3kge1xuICAgIGdldChlbnRpdHlJZDogc3RyaW5nKTogRmxhZ2dhYmxlIHtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5nZXRFbnRpdHkoZW50aXR5SWQpO1xuICAgICAgICBpZiAoZW50aXR5IGluc3RhbmNlb2YgVG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBlbnRpdHkuYWN0b3I7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZW50aXR5O1xuICAgIH1cbn0iLCJleHBvcnQgYWJzdHJhY3QgY2xhc3MgRmxhZ0tleVN0cmF0ZWd5IHtcbiAgICBhYnN0cmFjdCBnZXQoZW50aXR5SWQ6IHN0cmluZyk6IHN0cmluZztcblxuICAgIHByb3RlY3RlZCBnZXRFbnRpdHkoZW50aXR5SWQ6IHN0cmluZykgOiBBY3RvciB8IFRva2VuIHtcbiAgICAgICAgcmV0dXJuIGdhbWUuYWN0b3JzLmdldChlbnRpdHlJZCkgfHwgY2FudmFzLnRva2Vucy5nZXQoZW50aXR5SWQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlZmF1bHRGbGFnS2V5U3RyYXRlZ3kgZXh0ZW5kcyBGbGFnS2V5U3RyYXRlZ3kge1xuICAgIGdldChlbnRpdHlJZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBlbnRpdHlJZDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaGFyZWRGbGFnS2V5U3RyYXRlZ3kgZXh0ZW5kcyBGbGFnS2V5U3RyYXRlZ3kge1xuICAgIGdldChfOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIFwic2hhcmVkLW1hY3Jvc1wiO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIExpbmtlZEZsYWdLZXlTdHJhdGVneSBleHRlbmRzIEZsYWdLZXlTdHJhdGVneSB7XG4gICAgZ2V0KGVudGl0eUlkOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5nZXRFbnRpdHkoZW50aXR5SWQpO1xuICAgICAgICBpZiAoZW50aXR5IGluc3RhbmNlb2YgVG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiAoZW50aXR5LmRhdGEuYWN0b3JMaW5rID8gZW50aXR5LmFjdG9yIDogZW50aXR5KS5pZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbnRpdHkuaWQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWx3YXlzTGlua2VkRmxhZ0tleVN0cmF0ZWd5IGV4dGVuZHMgRmxhZ0tleVN0cmF0ZWd5IHtcbiAgICBnZXQoZW50aXR5SWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmdldEVudGl0eShlbnRpdHlJZCk7XG4gICAgICAgIGlmIChlbnRpdHkgaW5zdGFuY2VvZiBUb2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIGVudGl0eS5hY3Rvci5pZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbnRpdHkuaWQ7XG4gICAgfVxufSIsImltcG9ydCB7IFNldHRpbmdzIH0gZnJvbSAnLi4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgRm91bmRyeUhvdGJhckZsYWdzIH0gZnJvbSAnLi9ob3RiYXJGbGFncyc7XG5pbXBvcnQgeyBTaGFyZWRBbHdheXNMaW5rZWRGbGFnc1N0cmF0ZWd5LCBTaGFyZWRMaW5rZWRGbGFnc1N0cmF0ZWd5LCBEZWZhdWx0RmxhZ3NTdHJhdGVneSB9IGZyb20gJy4vZmxhZ1N0cmF0ZWdpZXMnO1xuaW1wb3J0IHsgU2hhcmVkRmxhZ0tleVN0cmF0ZWd5LCBMaW5rZWRGbGFnS2V5U3RyYXRlZ3ksIEFsd2F5c0xpbmtlZEZsYWdLZXlTdHJhdGVneSwgRGVmYXVsdEZsYWdLZXlTdHJhdGVneSB9IGZyb20gJy4vZmxhZ0tleVN0cmF0ZWdpZXMnO1xuXG5leHBvcnQgY2xhc3MgSG90YmFyRmxhZ3NGYWN0b3J5IHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNldHRpbmdzOiBTZXR0aW5ncykgeyB9XG5cbiAgICBwdWJsaWMgY3JlYXRlKCkge1xuICAgICAgICBjb25zdCBmbGFnU3RyYXRlZ3kgPSB0aGlzLmNyZWF0ZUZsYWdTdHJhdGVneSgpO1xuICAgICAgICByZXR1cm4gbmV3IEZvdW5kcnlIb3RiYXJGbGFncyhmbGFnU3RyYXRlZ3kpOyAgXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVGbGFnU3RyYXRlZ3koKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxhZ1N0cmF0ZWd5RmFjdG9yeSh0aGlzLnNldHRpbmdzKS5jcmVhdGUoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGbGFnU3RyYXRlZ3lGYWN0b3J5IHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2V0dGluZ3M6IFNldHRpbmdzKSB7IH1cblxuICAgIHB1YmxpYyBjcmVhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNoYXJlSG90YmFyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbHdheXNMaW5rVG9BY3Rvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2hhcmVkQWx3YXlzTGlua2VkRmxhZ3NTdHJhdGVneSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubGlua1RvTGlua2VkQWN0b3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNoYXJlZExpbmtlZEZsYWdzU3RyYXRlZ3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IERlZmF1bHRGbGFnc1N0cmF0ZWd5KCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmxhZ0tleUZhY3Rvcnkge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2V0dGluZ3M6IFNldHRpbmdzKSB7IH1cblxuICAgIHB1YmxpYyBjcmVhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNoYXJlSG90YmFyKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaGFyZWRGbGFnS2V5U3RyYXRlZ3koKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFsd2F5c0xpbmtUb0FjdG9yKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBbHdheXNMaW5rZWRGbGFnS2V5U3RyYXRlZ3koKTtcblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5saW5rVG9MaW5rZWRBY3RvcilcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGlua2VkRmxhZ0tleVN0cmF0ZWd5KCk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBEZWZhdWx0RmxhZ0tleVN0cmF0ZWd5KCk7XG4gICAgfVxufSIsImltcG9ydCB7IFNldHRpbmdzIH0gZnJvbSAnLi4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgUGFnZUZsYWcgfSBmcm9tICcuLi9mbGFncy9wYWdlRmxhZyc7XG5cbmludGVyZmFjZSBGb3VuZHJ5SG90YmFyIHtcbiAgICBwYWdlOiBudW1iZXI7XG4gICAgcmVuZGVyOiAoZm9yY2U/OiBib29sZWFuKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgVXNlckhvdGJhciB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXR0aW5nczogU2V0dGluZ3MsIHByaXZhdGUgaG90YmFyOiBGb3VuZHJ5SG90YmFyLCBwcml2YXRlIHBhZ2VGbGFnOiBQYWdlRmxhZykgeyB9XG5cbiAgICBwdWJsaWMgZ29Ub1BhZ2UoaGFzVG9rZW5TZWxlY3RlZDogYm9vbGVhbikge1xuICAgICAgICBpZiAoaGFzVG9rZW5TZWxlY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5nb1RvVG9rZW5Ib3RiYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ29Ub0xhc3RBY3RpdmVQYWdlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ29Ub1Rva2VuSG90YmFyKCkge1xuICAgICAgICBpZiAodGhpcy5ob3RiYXIucGFnZSAhPSB0aGlzLnNldHRpbmdzLmhvdGJhclBhZ2UpXG4gICAgICAgICAgICB0aGlzLnBhZ2VGbGFnLnNldCh0aGlzLmhvdGJhci5wYWdlKTtcblxuICAgICAgICB0aGlzLnJlbmRlcih0aGlzLnNldHRpbmdzLmhvdGJhclBhZ2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnb1RvTGFzdEFjdGl2ZVBhZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmhvdGJhci5wYWdlICE9IHRoaXMuc2V0dGluZ3MuaG90YmFyUGFnZSlcbiAgICAgICAgICAgIHJldHVybjsgLy8gdXNlciBhbHJlYWR5IG1vdmVkIGF3YXkgZnJvbSB0aGUgdG9rZW4gaG90YmFyLlxuXG4gICAgICAgIHRoaXMucmVuZGVyKHRoaXMucGFnZUZsYWcuZ2V0KCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyKHBhZ2U6IG51bWJlcikge1xuICAgICAgICB0aGlzLmhvdGJhci5wYWdlID0gcGFnZTtcbiAgICAgICAgLy8gRklYTUU6IFJlbmRlciBkb2VzIG5vdCBhbHdheXMgd29yayB3aXRob3V0IHRoZSB0aW1lb3V0LlxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaG90YmFyLnJlbmRlcih0cnVlKSwgNTApO1xuICAgICAgICAvLyB0aGlzLmhvdGJhci5yZW5kZXIodHJ1ZSk7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgQ09OU1RBTlRTIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgY2xhc3MgUGFnZUZsYWcge1xuICAgIHB1YmxpYyBnZXQoKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IHBhZ2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgJHtDT05TVEFOVFMubW9kdWxlTmFtZX0uYWN0aXZlUGFnZWApO1xuICAgICAgICBpZiAocGFnZSkgcmV0dXJuICtwYWdlO1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0KHBhZ2U6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7Q09OU1RBTlRTLm1vZHVsZU5hbWV9LmFjdGl2ZVBhZ2VgLCBwYWdlICsgXCJcIik7XG4gICAgfVxufSIsImltcG9ydCB7IFNldHRpbmdzIH0gZnJvbSAnLi9zZXR0aW5ncyc7XG5pbXBvcnQgeyBUb2tlbkhvdGJhciB9IGZyb20gJy4vaG90YmFyL3Rva2VuSG90YmFyJztcbmltcG9ydCB7IENPTlNUQU5UUyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IEhvdGJhckZsYWdzRmFjdG9yeSwgRmxhZ0tleUZhY3RvcnkgfSBmcm9tICcuL2ZsYWdzL2ZhY3RvcnknO1xuaW1wb3J0IHsgVXNlckhvdGJhciB9IGZyb20gJy4vaG90YmFyL3VzZXJIb3RiYXInO1xuaW1wb3J0IHsgUGFnZUZsYWcgfSBmcm9tICcuL2ZsYWdzL3BhZ2VGbGFnJztcblxuZnVuY3Rpb24gbWlncmF0ZUZsYWcoKSB7XG4gICAgbGV0IG9sZERhdGEgPSBnYW1lLnVzZXIuZ2V0RmxhZyhcIndvcmxkXCIsIFwidG9rZW4taG90YmFyXCIpO1xuICAgIGxldCBuZXdEYXRhID0gZ2FtZS51c2VyLmdldEZsYWcoXCJ3b3JsZFwiLCBDT05TVEFOVFMubW9kdWxlTmFtZSk7XG4gICAgaWYgKCFvbGREYXRhIHx8IG5ld0RhdGEpIHJldHVybjtcblxuICAgIGNvbnNvbGUuaW5mbyhcIk1pZ3JhdGluZyBUb2tlbiBIb3RiYXIuLi5cIik7XG5cbiAgICBnYW1lLnVzZXIuc2V0RmxhZyhcIndvcmxkXCIsIENPTlNUQU5UUy5tb2R1bGVOYW1lLCBvbGREYXRhKTtcbiAgICBnYW1lLnVzZXIudW5zZXRGbGFnKFwid29ybGRcIiwgXCJ0b2tlbi1ob3RiYXJcIik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRva2VuSG90YmFyKCkge1xuICAgIGNvbnN0IHNldHRpbmdzID0gbmV3IFNldHRpbmdzKCkubG9hZChnYW1lLnNldHRpbmdzKTtcbiAgICBjb25zdCBob3RiYXJGbGFncyA9IG5ldyBIb3RiYXJGbGFnc0ZhY3Rvcnkoc2V0dGluZ3MpO1xuICAgIGNvbnN0IGtleVN0cmF0ZWd5ID0gbmV3IEZsYWdLZXlGYWN0b3J5KHNldHRpbmdzKTtcbiAgICByZXR1cm4gbmV3IFRva2VuSG90YmFyKFxuICAgICAgICBob3RiYXJGbGFncy5jcmVhdGUoKSxcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucyxcbiAgICAgICAgKDxhbnk+dWkpLmhvdGJhci5wYWdlLFxuICAgICAgICBzZXR0aW5ncy5ob3RiYXJQYWdlLFxuICAgICAgICBrZXlTdHJhdGVneS5jcmVhdGUoKSk7XG59XG5cbkhvb2tzLm9uKFwiaW5pdFwiLCAoKSA9PiB7XG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcihDT05TVEFOVFMubW9kdWxlTmFtZSwgU2V0dGluZ3Mua2V5cy5ob3RiYXJQYWdlLCB7XG4gICAgICAgIG5hbWU6IFwiUGFnZVwiLFxuICAgICAgICBoaW50OiBcIlRoZSBob3RiYXIgcGFnZSB0aGF0IHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgdG9rZW4gaG90YmFyLiBDaGFuZ2luZyB0aGlzIHdpbGwgd2lwZSBleGlzdGluZyB0b2tlbiBiYXJzIVwiLFxuICAgICAgICBzY29wZTogXCJ3b3JsZFwiLFxuICAgICAgICBjb25maWc6IHRydWUsXG4gICAgICAgIGRlZmF1bHQ6IDUsXG4gICAgICAgIHR5cGU6IE51bWJlclxuICAgIH0pO1xuXG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcihDT05TVEFOVFMubW9kdWxlTmFtZSwgU2V0dGluZ3Mua2V5cy5saW5rVG9MaW5rZWRBY3Rvciwge1xuICAgICAgICBuYW1lOiBcIkxpbmsgdG8gbGlua2VkIGFjdG9yXCIsXG4gICAgICAgIGhpbnQ6IFwiTGluayB0aGUgdG9rZW4gaG90YmFyIHRvIHRoZSBhY3RvciBpZiB0aGUgdG9rZW4gaXMgbGlua2VkLlwiLFxuICAgICAgICBzY29wZTogXCJ3b3JsZFwiLFxuICAgICAgICBjb25maWc6IHRydWUsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHR5cGU6IEJvb2xlYW5cbiAgICB9KTtcblxuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoQ09OU1RBTlRTLm1vZHVsZU5hbWUsIFNldHRpbmdzLmtleXMuYWx3YXlzTGlua1RvQWN0b3IsIHtcbiAgICAgICAgbmFtZTogXCJBbHdheXMgbGluayB0byBhY3RvclwiLFxuICAgICAgICBoaW50OiBcIkxpbmsgdGhlIHRva2VuIGhvdGJhciB0byB0aGUgYWN0b3IgZXZlbiBpZiB0aGUgdG9rZW4gaXMgdW5saW5rZWQuXCIsXG4gICAgICAgIHNjb3BlOiBcIndvcmxkXCIsXG4gICAgICAgIGNvbmZpZzogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgIHR5cGU6IEJvb2xlYW5cbiAgICB9KTtcblxuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoQ09OU1RBTlRTLm1vZHVsZU5hbWUsIFNldHRpbmdzLmtleXMuc2hhcmVIb3RiYXIsIHtcbiAgICAgICAgbmFtZTogXCJTaGFyZSB0aGUgaG90YmFyIHdpdGggb3RoZXIgcGxheWVyc1wiLFxuICAgICAgICBoaW50OiBcIldoZW4gc2V0IGV2ZXJ5IHRva2VuIHdpbGwgaGF2ZSBhIHNpbmdsZSBob3RiYXIgc2hhcmVkIGJ5IGFsbCBwbGF5ZXJzLlwiLFxuICAgICAgICBzY29wZTogXCJ3b3JsZFwiLFxuICAgICAgICBjb25maWc6IHRydWUsXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB0eXBlOiBCb29sZWFuXG4gICAgfSk7XG5cbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKENPTlNUQU5UUy5tb2R1bGVOYW1lLCBTZXR0aW5ncy5rZXlzLmxvY2tIb3RiYXIsIHtcbiAgICAgICAgbmFtZTogXCJMb2NrIHNoYXJlZCBob3RiYXJcIixcbiAgICAgICAgaGludDogXCJXaGVuIHNldCwgb25seSBhIEdNIGNhbiB1cGRhdGUgdGhlIHRva2VuIGhvdGJhci4gT25seSBhcHBsaWVzIHRvIHNoYXJlZCBob3RiYXJzLlwiLFxuICAgICAgICBzY29wZTogXCJ3b3JsZFwiLFxuICAgICAgICBjb25maWc6IHRydWUsXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB0eXBlOiBCb29sZWFuXG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmxvZyhcImluaXRpYWxpemVkIFRva2VuIEhvdGJhclwiKTtcbiAgICBzZXRUaW1lb3V0KG1pZ3JhdGVGbGFnLCAyMDApO1xufSk7XG5cbkhvb2tzLm9uKFwicmVuZGVySG90YmFyXCIsIChkYXRhOiBhbnkpID0+IHtcbiAgICAvLyBjb25zdCBtYWNyb3MgPSBkYXRhLm1hY3JvcztcbiAgICAvLyBGSVhNRTogZHVlIHRvIGEgcmFjZSBjb25kaXRpb24sIHNvbWV0aW1lcyB0aGUgd3JvbmcgbWFjcm9zIGFyZSBwYXNzZWQuXG4gICAgLy8gICAgICAgIFdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gdGhlIG9uZXMgb24gdGhlIHRva2VuIGhvdGJhci5cbiAgICAvLyAgICAgICAgISBXaWxsIGJlIHVubmVjZXNzYXJ5IHRvIGZpeCBpbiB2My4wLjAgKHNlcGFyYXRlIGhvdGJhciwgYWxsIHBhZ2VzL3Nsb3RzIHdpbGwgYmUgcmVsZXZhbnQpXG4gICAgY29uc3Qgc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3MoKS5sb2FkKGdhbWUuc2V0dGluZ3MpO1xuICAgIGNvbnN0IG1hY3JvcyA9ICg8YW55PnVpKS5ob3RiYXIuX2dldE1hY3Jvc0J5UGFnZShzZXR0aW5ncy5ob3RiYXJQYWdlKTtcblxuICAgIGNvbnN0IHRva2VuID0gY2FudmFzLnRva2Vucy5jb250cm9sbGVkWzBdO1xuICAgIGlmICh0b2tlbilcbiAgICAgICAgY3JlYXRlVG9rZW5Ib3RiYXIoKS5zYXZlKHRva2VuLCBtYWNyb3MsICFzZXR0aW5ncy5sb2NrSG90YmFyIHx8IGdhbWUudXNlci5pc0dNKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn0pO1xuXG5Ib29rcy5vbihcImNvbnRyb2xUb2tlblwiLCAoKSA9PiB7XG4gICAgY29uc3QgdG9rZW4gPSBjYW52YXMudG9rZW5zLmNvbnRyb2xsZWRbMF07XG5cbiAgICBjb25zdCB1aUhvdGJhciA9IG5ldyBVc2VySG90YmFyKG5ldyBTZXR0aW5ncygpLmxvYWQoZ2FtZS5zZXR0aW5ncyksICg8YW55PnVpKS5ob3RiYXIsIG5ldyBQYWdlRmxhZygpKTtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgLy8gaG90YmFyIGRvZXMgbm90IHlldCBleGlzdCBvbiBnYW1lLnVzZXIuZGF0YSBhbmQgdWkgZGVmaW5pdGlvbnMsIGhlbmNlIHRoZSBjYXN0cyB0byBhbnkuXG4gICAgICAgIGxldCByZXN1bHQgPSBjcmVhdGVUb2tlbkhvdGJhcigpXG4gICAgICAgICAgICAubG9hZCh0b2tlbiwgZHVwbGljYXRlKCg8YW55PmdhbWUudXNlci5kYXRhKS5ob3RiYXIpLCBnYW1lLm1hY3Jvcy5lbnRpdGllcyk7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHJlc3VsdC5oYXNNYWNyb3MpIHtcbiAgICAgICAgICAgICAgICBnYW1lLnVzZXIudXBkYXRlKHtob3RiYXI6IHJlc3VsdC5ob3RiYXJ9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVpSG90YmFyLmdvVG9QYWdlKHJlc3VsdC5oYXNNYWNyb3MpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdWlIb3RiYXIuZ29Ub1BhZ2UoZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn0pO1xuXG5Ib29rcy5vbihcInByZURlbGV0ZVRva2VuXCIsIChfOiBTY2VuZSwgdG9rZW46IGFueSkgPT4ge1xuICAgIGNyZWF0ZVRva2VuSG90YmFyKCkucmVtb3ZlKHRva2VuLl9pZCk7XG4gICAgcmV0dXJuIHRydWU7XG59KTtcblxuSG9va3Mub24oXCJwcmVEZWxldGVBY3RvclwiLCAoYWN0b3I6IGFueSkgPT4ge1xuICAgIGNyZWF0ZVRva2VuSG90YmFyKCkucmVtb3ZlKGFjdG9yLmRhdGEuX2lkKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTs7O0FDRkE7QUFNQTtBQWVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7QUF4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2ZBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7QUNqSEE7QUFzQkE7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNsQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQ3ZDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQ3ZDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQzFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBOzs7QUN6Q0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')}]);